{
	"id": 1,
	"languages": [
		{
			"lang": "en",
			"title": "Palindrome Checker",
			"description": "Checks if a given string is a palindrome",
			"note": "Questions Note",
			"hint": "Compare characters from the beginning and end of the string moving towards the center."
		},
		{
			"lang": "tr",
			"title": "Palindrom Kontrolü",
			"description": "Verilen kelimenin palindrom olup olmadığına bak.",
			"note": "Sorunun Notu",
			"hint": "Karakterleri dizinin başından ve sonundan merkeze doğru karşılaştır."
		}
	],
	"quest": {
		"difficulty": 1,
		"funcName": "isPalindrome",
		"tests": [
			{
				"input": ["madam"],
				"output": [true]
			},
			{
				"input": ["hello"],
				"output": [false]
			},
			{
				"input": ["racecar"],
				"output": [true]
			}
		],
		"params": [
			{
				"name": "s",
				"type": "string"
			}
		],
		"returns": [
			{
				"name": "res",
				"type": "bool"
			}
		],
		"questImports": [
			"#include <string>",
			"#include <iostream>"
		],
		"codeTemplates": [
			{
				"programmingID": 1,
				"frontend": "$returns$ $funcname$($params$){\n\n // Write your code here \n\n}",
				"template": "$userCode$\n\nint main() {\n    $checks$\n    return 0;\n}",
				"check": "$returns$ result = $func$($input$);\n    if (result == $output$) {\n        std::cout << \"Test Passed\" << std::endl;\n    } else {\n       std::cout << \"Test Failed: Expected $output$, but got \" << result << std::endl;\n return 1;}\n"
			}
		]
	}
}
