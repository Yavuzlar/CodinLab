basePath: /api/v1
definitions:
  dto.CreateUserDTO:
    properties:
      githubProfile:
        maxLength: 30
        type: string
      name:
        description: Name is required
        type: string
      password:
        description: Password is required and must be at least 8 characters
        minLength: 8
        type: string
      role:
        type: string
      surname:
        description: Surname is required
        type: string
      username:
        description: Username is required, must be alphanumeric and between 3-30 characters
        maxLength: 30
        minLength: 3
        type: string
    required:
    - name
    - password
    - role
    - surname
    - username
    type: object
  dto.LanguageDTO:
    properties:
      content:
        type: string
      description:
        type: string
      lang:
        type: string
      note:
        type: string
      title:
        type: string
    type: object
  dto.LogDTO:
    properties:
      content:
        type: string
      id:
        type: string
      labPathID:
        type: integer
      logType:
        type: string
      programmingID:
        type: integer
      userId:
        type: string
    type: object
  dto.LoginDTO:
    properties:
      password:
        minLength: 8
        type: string
      username:
        maxLength: 30
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  dto.PathDTO:
    properties:
      difficulty:
        type: integer
      id:
        type: integer
      isFinished:
        type: boolean
      isStarted:
        type: boolean
      languages:
        items:
          $ref: '#/definitions/dto.LanguageDTO'
        type: array
      name:
        type: string
    type: object
  dto.RegisterDTO:
    properties:
      githubProfile:
        maxLength: 30
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
      surname:
        type: string
      username:
        maxLength: 30
        minLength: 3
        type: string
    required:
    - name
    - password
    - surname
    - username
    type: object
  dto.RoadDTO:
    properties:
      iconPath:
        type: string
      name:
        type: string
      paths:
        items:
          $ref: '#/definitions/dto.PathDTO'
        type: array
    type: object
  dto.SolutionsByDayDTO:
    properties:
      date:
        type: string
      labCount:
        type: integer
      roadCount:
        type: integer
    type: object
  dto.SolutionsHoursByProgrammingDTO:
    properties:
      labHours:
        type: number
      programmingID:
        type: integer
      roadHours:
        type: number
    type: object
  dto.StartDTO:
    properties:
      programmingID:
        type: integer
    required:
    - programmingID
    type: object
  dto.UpdatePasswordDTO:
    properties:
      confirmPassword:
        minLength: 8
        type: string
      newPassword:
        minLength: 8
        type: string
      password:
        type: string
    required:
    - confirmPassword
    - newPassword
    - password
    type: object
  dto.UpdateUserDTO:
    properties:
      githubProfile:
        maxLength: 30
        type: string
      name:
        type: string
      password:
        type: string
      surname:
        type: string
      username:
        maxLength: 30
        minLength: 3
        type: string
    required:
    - password
    type: object
  dto.UserDTO:
    properties:
      bestLanguage:
        type: string
      githubProfile:
        type: string
      name:
        type: string
      role:
        type: string
      surname:
        type: string
      username:
        type: string
    type: object
  response.BaseResponse:
    properties:
      data: {}
      data_count:
        type: integer
      errors: {}
      message:
        type: string
      status_code:
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  description: API Service for CodinLab
  title: API Service
  version: v1
paths:
  /private/admin/user:
    post:
      consumes:
      - application/json
      description: Creates User
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Creates User
      tags:
      - Admin
  /private/admin/user/{ID}:
    get:
      consumes:
      - application/json
      description: Retrieves User Profile
      parameters:
      - description: User ID
        in: path
        name: ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserDTO'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get Profile
      tags:
      - Admin
  /private/admin/users:
    get:
      consumes:
      - application/json
      description: Retrieves All Users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get Users
      tags:
      - Admin
  /private/home/advancement:
    get:
      consumes:
      - application/json
      description: Get User Advancement
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: GetUserAdvancement
      tags:
      - Home
  /private/home/development:
    get:
      consumes:
      - application/json
      description: Get User Development
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: GetUserDevelopment
      tags:
      - Home
  /private/home/inventories:
    get:
      consumes:
      - application/json
      description: Get Inventories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: GetInventories
      tags:
      - Home
  /private/home/lab:
    get:
      consumes:
      - application/json
      description: Get Lab Content
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: GetLabContent
      tags:
      - Home
  /private/home/level:
    get:
      consumes:
      - application/json
      description: Get User Level
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: GetUserLevel
      tags:
      - Home
  /private/home/road:
    get:
      consumes:
      - application/json
      description: Get Road Content
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: GetRoadContent
      tags:
      - Home
  /private/home/welcome:
    get:
      consumes:
      - application/json
      description: Get Welcome Content
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: GetWelcomeContent
      tags:
      - Home
  /private/lab/{programmingID}/{labID}:
    get:
      consumes:
      - application/json
      description: Get Lab By Programming Language ID & Lab ID
      parameters:
      - description: Programming Language ID
        in: path
        name: programmingID
        required: true
        type: string
      - description: Lab ID
        in: path
        name: labID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: GetLabByID
      tags:
      - Lab
  /private/labs/{ID}:
    get:
      consumes:
      - application/json
      description: Get Labs By Programming Language ID
      parameters:
      - description: Programming Language ID
        in: path
        name: ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: GetLabsById
      tags:
      - Lab
  /private/labs/stats/{language}/{userID}:
    get:
      consumes:
      - application/json
      description: Get User Programming Language Lab Statistics
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      - description: Language
        in: path
        name: language
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: GetUserProgrammingLanguageLabStats
      tags:
      - Lab
  /private/labs/stats/{userID}:
    get:
      consumes:
      - application/json
      description: Get User General Lab Statistics
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: GetUserGeneralLabStats
      tags:
      - Lab
  /private/log:
    get:
      consumes:
      - application/json
      description: Retrieves all logs based on the provided query parameters.
      parameters:
      - description: User ID
        in: query
        name: userID
        type: string
      - description: Programming ID
        in: query
        name: programmingID
        type: integer
      - description: Log Lab or Path ID
        in: query
        name: labRoadID
        type: integer
      - description: Log Content
        in: query
        name: content
        type: string
      - description: Log Type
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.BaseResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.LogDTO'
                  type: array
              type: object
      summary: Get all logs
      tags:
      - Log
  /private/log/solution/byday:
    get:
      consumes:
      - application/json
      description: Retrieves the number of lab and road solutions solved day by day.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.BaseResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.SolutionsByDayDTO'
                  type: array
              type: object
      summary: GetSolutionsByDay
      tags:
      - Log
  /private/log/solution/hours:
    get:
      consumes:
      - application/json
      description: Retrieves the total hours spent on lab and road solutions for each
        programming language in the last week.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.BaseResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.SolutionsHoursByProgrammingDTO'
                  type: array
              type: object
      summary: GetSolutionsHoursByProgramming
      tags:
      - Log
  /private/road/{roadID}:
    get:
      consumes:
      - application/json
      description: Get Road with Paths
      parameters:
      - description: roadID
        in: path
        name: roadID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.RoadDTO'
              type: object
      summary: GetRoads
      tags:
      - Road
  /private/road/{roadID}/{pathID}:
    get:
      consumes:
      - application/json
      description: Get Path By ID
      parameters:
      - description: Road ID
        in: path
        name: roadID
        required: true
        type: string
      - description: Path ID
        in: path
        name: pathID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.PathDTO'
              type: object
      summary: GetPathByID
      tags:
      - Road
  /private/road/start:
    post:
      consumes:
      - application/json
      description: Start
      parameters:
      - description: Start
        in: body
        name: start
        required: true
        schema:
          $ref: '#/definitions/dto.StartDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Start
      tags:
      - Road
  /private/user/:
    get:
      consumes:
      - application/json
      description: Gets users profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserDTO'
              type: object
      summary: GetProfile
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Updates user
      parameters:
      - description: UpdateUser
        in: body
        name: update
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: UpdateUser
      tags:
      - User
  /private/user/password:
    put:
      consumes:
      - application/json
      description: Updates users password
      parameters:
      - description: UpdatePassword
        in: body
        name: update
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePasswordDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: UpdatePassword
      tags:
      - User
  /public/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dto.LoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Login
      tags:
      - Auth
  /public/logout:
    post:
      consumes:
      - application/json
      description: Logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Logout
      tags:
      - Auth
  /public/register:
    post:
      consumes:
      - application/json
      description: Register
      parameters:
      - description: Register
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Register
      tags:
      - Auth
securityDefinitions:
  ApiKeyAuth:
    in: cookie
    name: session_id
    type: apiKey
swagger: "2.0"
